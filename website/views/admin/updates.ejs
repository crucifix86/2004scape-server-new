<!DOCTYPE html>
<html>
<head>
    <title>System Updates - Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            background: #1a1a1a;
            color: #fff;
        }
        
        .header {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
        }
        
        .header h1 {
            color: #ffd700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .header .user-info {
            color: #fff;
            margin-top: 10px;
        }
        
        .nav {
            background: #2a2a2a;
            padding: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .nav a {
            display: inline-block;
            padding: 15px;
            color: #fff;
            text-decoration: none;
            text-align: center;
            transition: background 0.3s;
        }
        
        .nav a:hover {
            background: #3a3a3a;
        }
        
        .nav a.active {
            background: #444;
            border-bottom: 3px solid #ffd700;
        }
        
        .container {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .panel {
            background: #2a2a2a;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
        
        .panel h2 {
            color: #ffd700;
            margin-bottom: 20px;
            font-size: 24px;
        }
        
        .update-status {
            padding: 20px;
            background: #1a1a1a;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .update-available {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid #4CAF50;
        }
        
        .update-current {
            background: rgba(33, 150, 243, 0.2);
            border: 1px solid #2196F3;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            margin-right: 10px;
            display: inline-block;
        }
        
        .btn-primary {
            background: #2196F3;
        }
        
        .btn-primary:hover {
            background: #1976D2;
        }
        
        .btn-success {
            background: #4CAF50;
        }
        
        .btn-success:hover {
            background: #45a049;
        }
        
        .btn-warning {
            background: #ff9800;
        }
        
        .btn-warning:hover {
            background: #e68900;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        .setting-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .setting-item label {
            color: #ffd700;
            font-weight: bold;
        }
        
        .setting-item input[type="checkbox"] {
            width: 20px;
            height: 20px;
        }
        
        .changelog {
            background: #1a1a1a;
            padding: 15px;
            border-radius: 5px;
            max-height: 300px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 14px;
            white-space: pre-wrap;
        }
        
        .progress-bar {
            width: 100%;
            height: 30px;
            background: #1a1a1a;
            border-radius: 5px;
            overflow: hidden;
            display: none;
            margin: 20px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: #4CAF50;
            width: 0%;
            transition: width 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-weight: bold;
        }
        
        .backup-list {
            background: #1a1a1a;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
        }
        
        .backup-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #444;
        }
        
        .backup-item:last-child {
            border-bottom: none;
        }
        
        .logout {
            float: right;
            background: #ff4444;
            color: #fff;
            padding: 5px 15px;
            border-radius: 5px;
            text-decoration: none;
        }
        
        .logout:hover {
            background: #ff6666;
        }
        
        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .alert-warning {
            background: rgba(255, 152, 0, 0.2);
            border: 1px solid #ff9800;
            color: #ffb74d;
        }
        
        .alert-info {
            background: rgba(33, 150, 243, 0.2);
            border: 1px solid #2196F3;
            color: #64b5f6;
        }
        
        .alert-success {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid #4CAF50;
            color: #81c784;
        }
    </style>
</head>
<body>
    <div class="header">
        <a href="/logout" class="logout">Logout</a>
        <h1>üîÑ System Updates</h1>
        <div class="user-info">
            Logged in as: <strong><%= user.username %></strong> 
            (<%= user.staffmodlevel >= 4 ? 'Developer' : user.staffmodlevel >= 3 ? 'Admin' : 'Moderator' %>)
        </div>
    </div>
    
    <div class="nav">
        <a href="/admin">üìä Dashboard</a>
        <a href="/admin/players">üë• Players</a>
        <a href="/admin/bans">üî® Bans & Mutes</a>
        <a href="/admin/reports">‚ö†Ô∏è Reports</a>
        <a href="/admin/chat">üí¨ Chat Logs</a>
        <a href="/admin/mod_logs">üìù Mod Logs</a>
        <a href="/admin/settings">‚öôÔ∏è Settings</a>
        <a href="/admin/news">üì∞ News</a>
        <a href="/admin/content">üé® Content</a>
        <a href="/admin/updates" class="active">üîÑ Updates</a>
        <a href="/">üè† Back to Site</a>
    </div>
    
    <div class="container">
        <!-- Update Status -->
        <div class="panel">
            <h2>Update Status</h2>
            <div id="updateStatus" class="update-status update-current">
                <p><strong>Current Version:</strong> <span id="currentVersion">Loading...</span></p>
                <p><strong>Latest Version:</strong> <span id="latestVersion">Checking...</span></p>
                <p><strong>Status:</strong> <span id="statusText">Checking for updates...</span></p>
            </div>
            <div id="updateActions" style="margin-top: 20px; display: none;">
                <button onclick="startUpdate()" class="btn btn-success">üîÑ Install Update</button>
                <button onclick="viewChangelog()" class="btn btn-primary">üìã View Changelog</button>
            </div>
            <div class="progress-bar" id="progressBar">
                <div class="progress-fill" id="progressFill">0%</div>
            </div>
        </div>
        
        <!-- Update Settings -->
        <div class="panel">
            <h2>Update Settings</h2>
            <form id="updateSettingsForm">
                <div class="settings-grid">
                    <div class="setting-item">
                        <label>
                            <input type="checkbox" id="autoBackup" name="auto_backup" checked>
                            Automatic Backup Before Update
                        </label>
                    </div>
                    <div class="setting-item">
                        <label>
                            <input type="checkbox" id="excludeCss" name="exclude_css">
                            Exclude CSS Files from Updates
                        </label>
                    </div>
                    <div class="setting-item">
                        <label>
                            <input type="checkbox" id="excludeIndex" name="exclude_index">
                            Exclude Index Files from Updates
                        </label>
                    </div>
                    <div class="setting-item">
                        <label>
                            <input type="checkbox" id="excludeWebsiteViews" name="exclude_website_views">
                            Exclude Website Views from Updates
                        </label>
                    </div>
                </div>
                <div style="margin-top: 20px;">
                    <button type="submit" class="btn btn-primary">üíæ Save Settings</button>
                </div>
            </form>
        </div>
        
        <!-- Changelog -->
        <div class="panel" id="changelogPanel" style="display: none;">
            <h2>Changelog</h2>
            <div class="changelog" id="changelogContent">
                Loading changelog...
            </div>
        </div>
        
        <!-- Backups -->
        <div class="panel">
            <h2>System Backups</h2>
            <button onclick="createBackup()" class="btn btn-warning">üì¶ Create Manual Backup</button>
            <div class="backup-list" id="backupList">
                <p>Loading backups...</p>
            </div>
        </div>
    </div>
    
    <script>
        let currentUpdateInfo = null;
        
        // Load update settings
        async function loadSettings() {
            try {
                const response = await fetch('/admin/update-settings');
                const settings = await response.json();
                
                document.getElementById('autoBackup').checked = settings.auto_backup !== false;
                document.getElementById('excludeCss').checked = settings.exclude_css === true;
                document.getElementById('excludeIndex').checked = settings.exclude_index === true;
                document.getElementById('excludeWebsiteViews').checked = settings.exclude_website_views === true;
            } catch (err) {
                console.error('Failed to load settings:', err);
            }
        }
        
        // Save update settings
        document.getElementById('updateSettingsForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const settings = {
                auto_backup: document.getElementById('autoBackup').checked,
                exclude_css: document.getElementById('excludeCss').checked,
                exclude_index: document.getElementById('excludeIndex').checked,
                exclude_website_views: document.getElementById('excludeWebsiteViews').checked
            };
            
            try {
                const response = await fetch('/admin/update-settings', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(settings)
                });
                
                if (response.ok) {
                    alert('Settings saved successfully');
                } else {
                    alert('Failed to save settings');
                }
            } catch (err) {
                alert('Error saving settings: ' + err.message);
            }
        });
        
        // Check for updates
        async function checkForUpdates() {
            try {
                const response = await fetch('/admin/check-updates');
                const data = await response.json();
                
                currentUpdateInfo = data;
                
                document.getElementById('currentVersion').textContent = data.currentVersion || 'Unknown';
                document.getElementById('latestVersion').textContent = data.latestVersion || 'Unknown';
                
                if (data.updateAvailable) {
                    document.getElementById('updateStatus').className = 'update-status update-available';
                    document.getElementById('statusText').textContent = 'Update available!';
                    document.getElementById('updateActions').style.display = 'block';
                } else {
                    document.getElementById('updateStatus').className = 'update-status update-current';
                    document.getElementById('statusText').textContent = 'Your system is up to date';
                    document.getElementById('updateActions').style.display = 'none';
                }
            } catch (err) {
                document.getElementById('statusText').textContent = 'Failed to check for updates';
                console.error('Update check failed:', err);
            }
        }
        
        // Start update process
        async function startUpdate() {
            if (!confirm('Are you sure you want to update the system? A backup will be created automatically.')) {
                return;
            }
            
            const progressBar = document.getElementById('progressBar');
            const progressFill = document.getElementById('progressFill');
            progressBar.style.display = 'block';
            
            try {
                // Start update
                const response = await fetch('/admin/start-update', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        version: currentUpdateInfo.latestVersion
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Update failed');
                }
                
                // Monitor progress
                const eventSource = new EventSource('/admin/update-progress');
                
                eventSource.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    progressFill.style.width = data.progress + '%';
                    progressFill.textContent = data.progress + '%';
                    
                    if (data.status === 'completed') {
                        eventSource.close();
                        alert('Update completed successfully! The server will restart.');
                        setTimeout(() => window.location.reload(), 3000);
                    } else if (data.status === 'error') {
                        eventSource.close();
                        alert('Update failed: ' + data.message);
                        progressBar.style.display = 'none';
                    }
                };
                
                eventSource.onerror = () => {
                    eventSource.close();
                    // Don't show error - connection loss is expected during server restart
                    progressFill.style.width = '100%';
                    progressFill.textContent = 'Update applied - Restarting server...';
                    
                    // Wait a bit then try to reconnect
                    setTimeout(() => {
                        checkServerStatus();
                    }, 5000);
                };
            } catch (err) {
                alert('Failed to start update: ' + err.message);
                progressBar.style.display = 'none';
            }
        }
        
        // Check if server is back online after restart
        async function checkServerStatus() {
            const progressFill = document.getElementById('progressFill');
            let attempts = 0;
            const maxAttempts = 12; // Try for 60 seconds
            
            const checkInterval = setInterval(async () => {
                attempts++;
                try {
                    // Use a manual timeout for better compatibility
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 2000);
                    
                    const response = await fetch('/admin/check-updates', {
                        method: 'GET',
                        signal: controller.signal
                    });
                    
                    clearTimeout(timeoutId);
                    
                    if (response.ok) {
                        clearInterval(checkInterval);
                        progressFill.textContent = 'Update completed successfully!';
                        alert('Update completed! The page will now reload.');
                        window.location.reload();
                    }
                } catch (err) {
                    // Still waiting for server to come back
                    progressFill.textContent = `Waiting for server to restart... (${60 - attempts * 5}s)`;
                }
                
                if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    progressFill.textContent = 'Update may require manual restart';
                    alert('Server is taking longer than expected to restart. Please check the server manually.');
                }
            }, 5000); // Check every 5 seconds
        }
        
        // View changelog
        function viewChangelog() {
            const panel = document.getElementById('changelogPanel');
            const content = document.getElementById('changelogContent');
            
            if (currentUpdateInfo && currentUpdateInfo.changelog) {
                content.textContent = currentUpdateInfo.changelog;
                panel.style.display = 'block';
            }
        }
        
        // Create manual backup
        async function createBackup() {
            if (!confirm('Create a manual backup of the system?')) {
                return;
            }
            
            try {
                const response = await fetch('/admin/create-backup', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    alert('Backup created successfully');
                    loadBackups();
                } else {
                    alert('Failed to create backup');
                }
            } catch (err) {
                alert('Error creating backup: ' + err.message);
            }
        }
        
        // Load backups list
        async function loadBackups() {
            try {
                const response = await fetch('/admin/list-backups');
                const backups = await response.json();
                
                const backupList = document.getElementById('backupList');
                
                if (backups.length === 0) {
                    backupList.innerHTML = '<p>No backups found</p>';
                    return;
                }
                
                backupList.innerHTML = backups.map(backup => `
                    <div class="backup-item">
                        <div>
                            <strong>${backup.filename}</strong>
                            <br>
                            <small>Size: ${backup.size} | Created: ${backup.created}</small>
                        </div>
                        <div>
                            <button onclick="downloadBackup('${backup.filename}')" class="btn btn-primary" style="padding: 5px 10px; font-size: 12px;">
                                üíæ Download
                            </button>
                            <button onclick="deleteBackup('${backup.filename}')" class="btn btn-ban" style="padding: 5px 10px; font-size: 12px;">
                                üóëÔ∏è Delete
                            </button>
                        </div>
                    </div>
                `).join('');
            } catch (err) {
                console.error('Failed to load backups:', err);
            }
        }
        
        // Download backup
        function downloadBackup(filename) {
            window.location.href = `/admin/download-backup/${filename}`;
        }
        
        // Delete backup
        async function deleteBackup(filename) {
            if (!confirm(`Are you sure you want to delete the backup "${filename}"?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/admin/delete-backup/${filename}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    alert('Backup deleted successfully');
                    loadBackups();
                } else {
                    const error = await response.text();
                    alert('Failed to delete backup: ' + error);
                }
            } catch (err) {
                alert('Error deleting backup: ' + err.message);
            }
        }
        
        // Initialize
        loadSettings();
        checkForUpdates();
        loadBackups();
        
        // Check for updates every 5 minutes
        setInterval(checkForUpdates, 5 * 60 * 1000);
    </script>
</body>
</html>